"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class RobotMessage(object):
    __slots__ = ["control_bits", "linear", "nonlinear", "extraPara", "position", "velocity"]

    __typenames__ = ["byte", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, [3], [3], [3], [5], [5]]

    def __init__(self):
        self.control_bits = 0
        self.linear = [ 0.0 for dim0 in range(3) ]
        self.nonlinear = [ 0.0 for dim0 in range(3) ]
        self.extraPara = [ 0.0 for dim0 in range(3) ]
        self.position = [ 0.0 for dim0 in range(5) ]
        self.velocity = [ 0.0 for dim0 in range(5) ]

    def encode(self):
        buf = BytesIO()
        buf.write(RobotMessage._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">B", self.control_bits))
        buf.write(struct.pack('>3d', *self.linear[:3]))
        buf.write(struct.pack('>3d', *self.nonlinear[:3]))
        buf.write(struct.pack('>3d', *self.extraPara[:3]))
        buf.write(struct.pack('>5d', *self.position[:5]))
        buf.write(struct.pack('>5d', *self.velocity[:5]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RobotMessage._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RobotMessage._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RobotMessage()
        self.control_bits = struct.unpack(">B", buf.read(1))[0]
        self.linear = struct.unpack('>3d', buf.read(24))
        self.nonlinear = struct.unpack('>3d', buf.read(24))
        self.extraPara = struct.unpack('>3d', buf.read(24))
        self.position = struct.unpack('>5d', buf.read(40))
        self.velocity = struct.unpack('>5d', buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if RobotMessage in parents: return 0
        tmphash = (0x8d31632edaf3eb0f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RobotMessage._packed_fingerprint is None:
            RobotMessage._packed_fingerprint = struct.pack(">Q", RobotMessage._get_hash_recursive([]))
        return RobotMessage._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

